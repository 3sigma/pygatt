# Architecture of pygatt
pygatt consists of a front end that provies an API and two interchangable backends that implement the Bluetooth communication using differently. The backend can either use gatttool/BlueZ or the Bluegiga BLED112. gatttool/BlueZ is Linux only whereas the Bluegiga BLED112 is cross platform (assuming you have purchased the dongle).

## Front end
The front end class pygatt.pygatt.BluetoothLEDevice represents a remote BLE device. The API provides the methods -- connect, char_read, char_write, subscribe -- that you need to interact with the device. When a BluetoothLEDevice object is created, there is an optional argument "backend" that allows for selection of the backend used. The default is gattool but the BLED112 can be used by setting the optional bled112 arguement to an instance of a BLED112Backend. Note that there are optional arguments for some of the methods of BluetoothLEDevice that must be specified when using one backend and not the other.

## BLED112 Backend
This backend uses the Bluegigga BLED112 and a minimalist implementation of Bluegigga BGLib to execute the Bluetooth communication. In this case, the class used by BluetoothLEDevice is pygatt.bled112_backend.BLED112Backend. BLED112Backend in turn uses pygatt.bled112_bglib.BGLib to communicate with the BLED112 dongle. BGLib's job is to construct comands for the dongle and parse the bytes received from the dongle into packets. BLED112Backend's job is to manage the timing of commands, handling of the data, and keep track of the state of the dongle and connection to the remote device.

## GATTTool Backend
This backend uses gatttool/BlueZ on Linux to execute the Bluetooth communication. In this case, the class used by BluetoothLEDevice is pygatt.gatttool_classes.GATTToolBackend. GATTToolBackend uses the python module pexpect to execute gatttool commannds as if a user were entering them on the comand line.
